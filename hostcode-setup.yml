---
- hosts: all
  become: true
  tasks:
    - name: Update apt cache
      apt: 
        update_cache: yes

    - name: Install required packages
      apt: 
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - gpg
        state: present

    - name: Install containerd
      apt: 
        name: containerd
        state: present

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory

    - name: Create containerd root directory
      file:
        path: /data/containerd
        state: directory

    - name: Create containerd config file
      shell: containerd config default | sudo tee /etc/containerd/config.toml

    - name: Create containerd config file
      shell: sed -i '/Systemd/s/false/true/g' /etc/containerd/config.toml

    - name: Create containerd config file
      shell: sed -i 's,var/lib,data,g' /etc/containerd/config.toml

    - name: Add the kernel modules to containerd config
      lineinfile:
        path: /etc/modules-load.d/containerd.conf
        line: |
          overlay
          br_netfilter
        create: yes
        state: present

    - name: Make sysctl changes
      lineinfile:
        path: /etc/sysctl.d/99-kubernetes.conf
        line: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        create: yes
        state: present

    - name: Create containerd config file
      shell: sysctl --system

    - name: Load overlay module
      shell: modprobe overlay
      changed_when: false

    - name: Load br_netfilter module
      shell: modprobe br_netfilter
      changed_when: false

    - name: Start and enable containerd service
      service:
        name: containerd
        state: started
        enabled: yes

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Restart containerd service
      service:
        name: containerd
        state: restarted

- hosts: nodejs_servers
  become: true
  tasks:
    - name: pull hostcode backend image
      command: ctr image pull docker.io/kartheek542/hostcode:backend-1.0

    - name: pull hostcode ui image
      command: ctr image pull docker.io/kartheek542/hostcode:ui-1.0

    - name: Run the backend container
      command: ctr run --net-host docker.io/kartheek542/hostcode:backend-1.0 hostcode-backend

    - name: Run the ui container
      command: ctr run --net-host docker.io/kartheek542/hostcode:ui-1.0 hostcode-ui

- hosts: kube_master, kubernetes_slaves
  become: true
  tasks:
    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      shell: swapoff -a

    - name: Create keyring dir
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: Get the Kubernetes signing key
      shell: 'curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg'

    - name: Add Kuberenets repository
      lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb /'
        create: yes

    - name: Update apt cache
      apt: 
        update_cache: yes

    - name: Install kubernetes packages
      apt: 
        name: 
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Enable kubelet
      service:
        name: kubelet
        state: started
        enabled: yes

    - name: Restart kubelet
      service:
        name: kubelet
        state: restarted

- hosts: kube_master
  become: true
  tasks:
    - name: Initialize cluster
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=10.0.1.10

    - name: Echo HOME
      shell: echo $HOME
      register: home_path

    - name: See $HOME path
      debug:
        msg: "{{ home_path.stdout }}"

    - name: Create .kube dir
      shell: mkdir $HOME/.kube

    - name: Create .kube dir
      shell: cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

    - name: Provide required permissions to kube config
      shell: chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Initialzie kubernetes network
      command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

    - name: Generate cluster join command
      command: kubeadm token create --print-join-command
      register: kube_join_command

    - name: See Join command
      debug:
        msg: "{{ kube_join_command.stdout }}"

- hosts: kubernetes_slaves
  become: true
  tasks:
    - name: Join cluster
      command: "{{ hostvars['kube_master']['kube_join_command']['stdout_lines'][0] }}"
      when: "'kubeadm join' in hostvars['kube_master']['kube_join_command']['stdout']"

- hosts: kube_master
  become: true
  tasks:
    - name: Restarting coredns
      command: kubectl rollout restart deployment coredns --namespace kube-system

    - name: Wait for coredns
      command: kubectl wait --for=condition=available --timeout=120s -n kube-system deployment/coredns

    - name: Create new namespace
      command: kubectl create namespace hostcode

    - name: Create secrets
      command: kubectl create secret generic my-aws-credentials --from-literal=aws_access_key_id={{ lookup('env', 'AWS_ACCESS_KEY_ID') }} --from-literal=aws_secret_access_key={{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }} -n hostcode

    - name: Copy worker-pod yaml
      copy:
        src: ./kubernetes/worker-pod.yml
        dest: /data/worker-pod.yml

    - name: Create secrets
      command: kubectl apply -f /data/worker-pod.yml